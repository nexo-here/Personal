const fs = require("fs-extra");
const path = require("path");

const dataPath = path.join(__dirname, "data.json");
if (!fs.existsSync(dataPath)) fs.writeJsonSync(dataPath, {});

module.exports = {
  config: {
    name: "bank",
    aliases: [],
    version: "1.2",
    author: "Nexo + ChatGPT",
    countDown: 5,
    role: 0,
    shortDescription: "Advanced banking system",
    longDescription: "A full-featured bank with earning games and leaderboard.",
    category: "economy",
    guide: `
{pn} balance - ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§
{pn} deposit <amount> - ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®‡•§
{pn} withdraw <amount> - ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶§‡ßÅ‡¶≤‡ßÅ‡¶®‡•§
{pn} leaderboard - ‡¶∏‡ßá‡¶∞‡¶æ ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï‡¶¶‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§
{pn} daily - ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‡¶´‡ßç‡¶∞‡¶ø ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶®‡¶ø‡¶®‡•§
{pn} work - ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ü‡ßü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
{pn} quiz - ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ü‡ßü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
{pn} dice - ‡¶°‡¶æ‡¶á‡¶∏ ‡¶ó‡ßá‡¶Æ ‡¶ñ‡ßá‡¶≤‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ú‡¶ø‡¶§‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶π‡¶æ‡¶∞‡¶æ‡¶®‡•§
{pn} guess <1-5> - ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
{pn} coin <head/tail> <amount> - ‡¶ï‡ßü‡ßá‡¶® ‡¶ü‡¶∏ ‡¶ó‡ßá‡¶Æ ‡¶ñ‡ßá‡¶≤‡ßÅ‡¶®‡•§
{pn} roulette <amount> <red/black/green> - ‡¶∞‡ßÅ‡¶≤‡ßá‡¶ü ‡¶ó‡ßá‡¶Æ ‡¶ñ‡ßá‡¶≤‡ßÅ‡¶®‡•§`
  },

  onStart: async function ({ message, event, args, usersData }) {
    const { senderID } = event;
    let data = fs.readJsonSync(dataPath);
    if (!data[senderID]) data[senderID] = { money: 0, bank: 0, lastDaily: 0 };
    const user = data[senderID];

    const save = () => fs.writeJsonSync(dataPath, data);
    const send = (msg) => message.reply(msg);
    const command = args[0];

    switch (command) {
      case "balance":
        return send(`Wallet: $${user.money}\nBank: $${user.bank}`);

      case "deposit": {
        const amount = parseInt(args[1]);
        if (isNaN(amount) || amount <= 0 || amount > user.money)
          return send("‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§");
        user.money -= amount;
        user.bank += amount;
        save();
        return send(`‡¶ú‡¶Æ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá $${amount}‡•§`);
      }

      case "withdraw": {
        const amount = parseInt(args[1]);
        if (isNaN(amount) || amount <= 0 || amount > user.bank)
          return send("‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡ßá ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§");
        user.bank -= amount;
        user.money += amount;
        save();
        return send(`‡¶§‡ßã‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá $${amount}‡•§`);
      }

      case "leaderboard": {
        const sorted = Object.entries(data).sort((a, b) => (b[1].money + b[1].bank) - (a[1].money + a[1].bank)).slice(0, 10);
        const top = await Promise.all(sorted.map(async ([uid, val], i) => {
          const name = await usersData.getName(uid);
          return `${i + 1}. ${name}: $${val.money + val.bank}`;
        }));
        return send(`üèÜ Leaderboard:\n${top.join("\n")}`);
      }

      case "daily": {
        const now = Date.now();
        if (now - user.lastDaily < 86400000)
          return send("‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶´‡ßç‡¶∞‡¶ø ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶®‡¶ø‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶ï‡¶æ‡¶≤ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
        const reward = Math.floor(Math.random() * 500 + 100);
        user.money += reward;
        user.lastDaily = now;
        save();
        return send(`‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶´‡ßç‡¶∞‡¶ø ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá‡¶®: $${reward}`);
      }

      case "work": {
        const jobs = ["developer", "farmer", "teacher", "youtuber"];
        const job = jobs[Math.floor(Math.random() * jobs.length)];
        const reward = Math.floor(Math.random() * 400 + 100);
        user.money += reward;
        save();
        return send(`‡¶Ü‡¶™‡¶®‡¶ø ${job} ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá $${reward} ‡¶Ü‡ßü ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§`);
      }

      case "quiz": {
        const questions = [
          { q: "2 + 2 = ?", a: "4" },
          { q: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶∞‡¶æ‡¶ú‡¶ß‡¶æ‡¶®‡ßÄ ‡¶ï‡¶ø?", a: "‡¶¢‡¶æ‡¶ï‡¶æ" }
        ];
        const selected = questions[Math.floor(Math.random() * questions.length)];
        message.reply(selected.q);
        const reply = await message.waitForReply(10000);
        if (!reply) return send("‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∂‡ßá‡¶∑, ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶®‡¶®‡¶ø‡•§");
        if (reply.body.toLowerCase() === selected.a.toLowerCase()) {
          const reward = 200;
          user.money += reward;
          save();
          return send(`‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞! ‡¶Ü‡¶™‡¶®‡¶ø $${reward} ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§`);
        } else return send("‡¶≠‡ßÅ‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞‡•§");
      }

      case "dice": {
        const roll = Math.ceil(Math.random() * 6);
        const reward = roll >= 4 ? 100 : -50;
        user.money += reward;
        save();
        return send(`‡¶Ü‡¶™‡¶®‡¶ø ${roll} ‡¶™‡ßá‡¶≤‡ßá‡¶® ‡¶è‡¶¨‡¶Ç $${reward} ${(reward > 0 ? "‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá‡¶®" : "‡¶π‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶õ‡ßá‡¶®")}`);
      }

      case "guess": {
        const num = Math.ceil(Math.random() * 5);
        const guess = parseInt(args[1]);
        if (!guess || guess < 1 || guess > 5) return send("‡ßß ‡¶•‡ßá‡¶ï‡ßá ‡ß´ ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®‡•§");
        if (guess === num) {
          const reward = 300;
          user.money += reward;
          save();
          return send(`‡¶∏‡¶†‡¶ø‡¶ï! ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶õ‡¶ø‡¶≤ ${num}, ‡¶Ü‡¶™‡¶®‡¶ø $${reward} ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§`);
        } else return send(`‡¶≠‡ßÅ‡¶≤! ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶õ‡¶ø‡¶≤ ${num}`);
      }

      case "coin": {
        const choice = args[1];
        const bet = parseInt(args[2]);
        if (!choice || !["head", "tail"].includes(choice)) return send("head ‡¶¨‡¶æ tail ‡¶¶‡¶ø‡¶®‡•§");
        if (isNaN(bet) || bet <= 0 || bet > user.money) return send("‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡¶æ‡¶ú‡¶ø ‡¶¶‡¶ø‡¶® ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§");
        const flip = Math.random() < 0.5 ? "head" : "tail";
        if (flip === choice) {
          user.money += bet;
          save();
          return send(`‡¶Ü‡¶™‡¶®‡¶ø ${flip} ‡¶™‡ßá‡¶≤‡ßá‡¶®! $${bet} ‡¶ú‡¶ø‡¶§‡ßá‡¶õ‡ßá‡¶®‡•§`);
        } else {
          user.money -= bet;
          save();
          return send(`‡¶Ü‡¶™‡¶®‡¶ø ${flip} ‡¶™‡ßá‡¶≤‡ßá‡¶®! $${bet} ‡¶π‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§`);
        }
      }

      case "roulette": {
        const bet = parseInt(args[1]);
        const color = args[2];
        if (!color || !["red", "black", "green"].includes(color)) return send("red, black ‡¶¨‡¶æ green ‡¶¶‡¶ø‡¶®‡•§");
        if (isNaN(bet) || bet <= 0 || bet > user.money) return send("‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡¶æ‡¶ú‡¶ø ‡¶¶‡¶ø‡¶® ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§");
        const spin = Math.floor(Math.random() * 15);
        let result = spin === 0 ? "green" : spin % 2 === 0 ? "black" : "red";
        if (color === result) {
          const reward = color === "green" ? bet * 14 : bet;
          user.money += reward;
          save();
          return send(`‡¶∞‡ßÅ‡¶≤‡ßá‡¶ü ${result} ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶Ü‡¶™‡¶®‡¶ø $${reward} ‡¶ú‡¶ø‡¶§‡ßá‡¶õ‡ßá‡¶®‡•§`);
        } else {
          user.money -= bet;
          save();
          return send(`‡¶∞‡ßÅ‡¶≤‡ßá‡¶ü ${result} ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶Ü‡¶™‡¶®‡¶ø $${bet} ‡¶π‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§`);
        }
      }

      default:
        return send("‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶∏‡¶æ‡¶¨‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°: balance, deposit, withdraw, leaderboard, daily, work, quiz, dice, guess, coin, roulette");
    }
  }
};
